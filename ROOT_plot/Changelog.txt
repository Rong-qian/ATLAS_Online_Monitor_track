## Known issues

- Occasional segfaults occur when opening and closing windows.
    -- Could this be related to signals not getting disconnected when the
       windows are closed?
- It is not obvious to user whether settings panel has been applied.
- Error log window segfaults inconsistently when closed with the close button.
- Saving plots is slow. Batch mode greatly speeds things up, but also breaks 
  the GUI.
- Plot saving does not interact well with TDC and ADC plot windows opened 
  after the save is started.
- Plot saving blocks the decoder.
- Closing a progress bar window causes a segfault.
- PlotSavingOperations still depends on progress bar view.
- Undefined behavior when pressing 'Save Plot' twice. We need to disable the
  button while plots are being saved. Use a flag in DAQState like we do for
  startRun?
- Plot updates block the decode thread. This doesn't matter much, but it would
  be nice if it didn't happen.
- Plot updates sometimes occur in the decode thread (e.g. when new data comes
  in) and sometimes occur in the UI thread (e.g. when the plot is first 
  opened). This is a bit messy. See about making all plot updates happen in the
  same thread.
- Occasional segfaults when opening/closing plot windows.
- UI blocks during plot updates when plots are open.
- RunStats display broken while reading a DAT file.
    -- This is probably because RunStats isn't updated until the entire DAT
       file is read.
- Hit rate display data is not saved with the rest of the plots.
- The hit rate display x axis bounds are not quite right.
- There is no GUI feedback distinguishing the period between when the stop
  run button is pressed and the run is actually stopped.
- Sometimes we end up with more events than packets. I'm not sure if this is
  valid behavior.
- When processing a file source, the monitor tries and fails to open a log 
  file.

## TODO:

- Display the .dat save file to the user when starting a run.
- Add the save progress bar to the main DAQ Manager window.
- Eliminate need for UISignals.cpp
- Separate data aggregation from PacketDecodingOperations.
- .dat and .log files should only be created if we are not processing a file
  source.

## NOTE:

- Good place to look for segfaults -- char array overflows

-------------------------------------------------------------------------------

## 2023-12-20

## Added 

- Retrieved FindPCAP.cmake from 
  https://github.com/bro/cmake/blob/master/FindPCAP.cmake
  in order to link to pcap when compiling with cmake.
- Added a standalone ethernet capture module.

## Changed

- Went through src folder and added required includes and namespace scoping.
- Separated headers and source files for everything involved in the monitor.
- PCapSessionHandler now returns a struct of data for each iteration, rather
  than just the number of packets buffered.

## Fixed

- Fixed system-specific issue where cmake was pointed at the wrong versions of
  gcc and g++. This should have no effect on the git repo.

## Removed

- MonitorConfig.cpp

-------------------------------------------------------------------------------

## 2023-12-19

## Added 

- Added standalone executable for the decode module (under construction).

## Changed

- Restructured the decoder to be usable as an independent module.
    - Removed DAQData dependence from Decoder. Data aggregation is now handled at
      a higher level.
    - Decoder::Refresh() now returns a data bundle, and does not store anything
      in DAQData.
- StartMonitor.cpp is now deprecated, and will not function. I may repair it
  later.


-------------------------------------------------------------------------------

## 2023-12-14

## Notes

- The GUI feels sluggish today. Is it possible I changed something that slowed
  everything down? Opening tabs is slow. Decode updates seem slower too.

## Added

- DAQData now keeps a vector of just the events from the latest iteration of
  the decoder.
- Hit rate graphs are now saved alongside adc and tdc spectra when plots are
  saved.
- Began work on cmake integration.

## Changed

- Added include statements for ROOT functionality to prepare cmake compilation.

-------------------------------------------------------------------------------

## 2023-12-09

## Changed

- View menu entries are no longer checked/unchecked, but simply bring 
  tabs that are already opened to the top.
- Began extensive rewrite of the menu bar. Objectives:
    - Clean up the menu bar code.
    - Create an easy-to-use interface for adding new UI tabs.

-------------------------------------------------------------------------------

## 2023-12-08

## Changed

- Switched to a one-window GUI layout with a tabbable viewport for 
  viewing plots.
- Plot windows now display plots in four rows instead of three.

-------------------------------------------------------------------------------

## 2023-12-07

## Added

- Error logs are now continuously saved to a .log file.
- The run viewer now includes a line providing feedback on run status.
- Hit rate calculations are done once per decode loop, rather than with
  every event.

## Changed

- The Run Viewer is now embedded in the DAQ Manager window.
- RunStats updates are now handled by the EntryView.
- Event counts used by Plots.cpp now come from DAQData.

## Fixed

- The total events counter is now reset when a new run is started.
- Hit rate calculations should now be correct.
- Fixed issue where reporting UI exceptions would deadlock the UI thread.

## Removed
- The packet count is no longer printed to cout.

-------------------------------------------------------------------------------

## 2023-11-20

## Added

- Channel plots now uncheck their menu entries when closed from the close
  button.
- Added a common mutex for UI updates.
- Added noise rate display.

## Changed

- Moved window mapping into view constructors.
- UISignalBus::onUpdate() is now called only when new data is available.

## Fixed

- Fixed issue where html elements would not be correctly formatted until the
  first onUpdate() signal.

-------------------------------------------------------------------------------

## 2023-11-16

## Added

- Added a 'Close All' option in the Run View's view menu that closes all open
  data displays.
- Added a CanvasWindow class to abstract out a lot of canvas-related
  boilerplate in plotting.

## Changed

- Removed dependence on a histogram vector from plotHistograms.
- Started removing view dependencies from operations in order to decouple
  the interface from the underlying program.
    -- The Run View is now started directly from the Main Menu view.
    -- All Run displays are now started directly from the RunMenuBar, except
       for the save progress bar.
    -- Removed ErrorOperations.cpp.
    -- Removed PlottingOperations.cpp.

## Notes

- Spent most of the day trying to figure out how to consistently detect when
  a plot window is closed in order to uncheck the related menu option and 
  stop updates for the window. The issue is that the CloseWindow() signal,
  besides behaving a bit unintelligibly, does not allow passing a parameter
  to its slot. This seems to force hardcoding separate functions for each
  plot window you might have, though I am considering some workarounds using
  IDs for each window.

-------------------------------------------------------------------------------

## 2023-11-15

## Added

- Added and implemented a module for saving plots to disk.
- Added an interface to the Run Viewer for saving plots to disk.
- Added a progress bar to the plot saving interface.
- Added a menu bar to Run Viewer.
- Added per-TDC channel plots

## Changed

- DAT file naming is set up in DataRunOperations now instead of 
  DataCaptureOperations.
- Replaced the radial window selector in the Run Viewer with a menu bar
  popup.

-------------------------------------------------------------------------------

## 2023-11-14

## Changed

- DeviceManager now produces a warning when pcap loads devices successfully, but
  does not find any devices. This can happen e.g. if the program is not run
  with root privileges.

-------------------------------------------------------------------------------

## 2023-11-13

## Added

- Added error log display option to canvas selector / window selector.
- Added real data to the run stats window.
- Added a basic error log window.
- Added tracking for dropped signals and events to DAQData.
- Added tracking for lost packets to DAQData.
- Added 'error levels' to error logger.
- Added color coding by level to the error log display.

## Changed

- Renamed CanvasSelector to WindowSelector.

## Fixed

- Fixed ambiguous warning message for TDC header/trailer mismatch.

-------------------------------------------------------------------------------

## 2023-11-7

## Added

- RunStats.cpp defining a GUI component displaying statistics for a data run.
- The run viewer now contains a run stats window.
- Added noise rate display option to canvas selector.
- Added additional data to Plots.cpp for noise rate display. Began work on 
  restoring the noise rate display.

## Changed

- MonitorHooks now separates function interface and implementation for better
  indenting.
- Monitor.cpp renamed to the more semantically accurate Decoder.cpp.

-------------------------------------------------------------------------------

## 2023-10-24

## Added

- DAQData now tracks:
    Packet count
    Event count
- Added more validation to event decoding. Not quite everything is there yet
  though.

## Changed

- DAQData is now passed around rather than accessed directly with getInstance
  more often. Eventually, DAQData will not need to be a singleton.
    This includes MonitorHooks.cpp, where DAQData is now meant to be accessed
    via function parameters.
- Events can now handle TDC headers and trailers, and TDC headers and trailers
  need not be excluded when assembling events. The hitfinder simply ignores
  TDC headers and trailers.
- Signal.cpp now provides interface for reading header and trailer counts from
  event trailers, as well as header/trailer count error flags.
- Validation is now done on event TDC headers and trailers

## Fixed

- Fixed issue where the settings panel would not fully reenable when a run was
  stopped.

-------------------------------------------------------------------------------

## 2023-10-19

## Added

- Added a "Close All" button to RunViewer's canvas selector that closes any
  open plotting windows.

## Changed

- TDC header and trailer signals are now identified by all identifying bits
  not just the ones that are also the channel ID. This is relevant in cases
  where corrupted signals were classified as TDC headers or trailers.
- Starting and stopping runs now emit signals on the UISignalBus, which are
  connected to methods that disable and enable various UI elements.

## Fixed

- Fixed issue where signal validators would print unreadable characters instead
  of integer TDC error data for TDC error signals.
- Fixed issue where TDC header and trailer signals would be packaged into 
  events. The decode pipeline would ultimately try to bin them into events,
  and fail because their channels don't exist. TDC header and trailer signals
  are now discarded from the signal buffer before it is packaged into an event.
- Fixed issue where the run viewer would open on starting a run even if it was
  already open.

-------------------------------------------------------------------------------

## 2023-10-17

## Added

- Implemented signal bus for custom UI signals, along with an update signal 
  that is run every few UI update frames and connected to histogram plotting.
- Restored full ADC and TDC histogram plotting to the GUI version of the
  monitor.
- Added a window that opens on run start. Plotting windows can be opened and
  close from this window. Plotting windows should now exit nicely, without
  producing segfaults.

## Changed

- DAQData is now passed into the monitor from the decode thread for better
  organization.
- DAQData is reset at the start of the decode thread instead of the monitor
  thread.
- PCapSessionHandler now buffers all available packets at once with a call to
  pcap_dispatch with negative second argument, rather than buffering them one
  at a time. Packet counting has been updated for the new implementation.
- UI loop now makes some naive attempts to maintain a consistent frame rate.

## Fixed

- DeviceSelectorPanel::setDeviceName() would attempt a null dereference if 
  passed the name of a device that does not exist.
- Deleting various views would induce double deletion due to erroneous explicit
  calls to superclass destructors.